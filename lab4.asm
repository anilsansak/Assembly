INCLUDE NUTS.DAT
INCLUDE DOS.MAC
STACK_SEG SEGMENT STACK USE16
 DB 100 DUP(?)
STACK_SEG ENDS     


DATA_SEG SEGMENT 'DATA' USE16

NUTS
ADR DW 80,?,80 DUP('$')
NEWLINE DB 0DH,0AH,'$'
DATA_SEG ENDS 




CODE_SEG SEGMENT PARA 'CODE' PUBLIC USE16
ASSUME CS:CODE_SEG, DS:DATA_SEG, SS:STACK_SEG
MAIN PROC FAR
INITIATE;USED MACRO  
 
	MOV DI,LIST_ORG
	MOV BX,1
	LOOP1:
		CMP BX,0H ;control for no change
		JZ EXIT
		XOR BX,BX
		MOV CX,8 ;number of linked list
		MOV DI,LIST_ORG
	
	LOOP2:
		CMP CX,1
		JE DONE2 ;print list
		MOV SI,[DI]
		MOV AL,[DI+2]
		MOV AH,[SI+2]
		CMP AH,AL
		JL CHANGE
		
	NOCHANGE:
		LEA DX,[DI]
		MOV ADR,DX
		MOV DI,SI
		DEC CX
		JMP LOOP2
		
	CHANGE:
		CMP AH,41H
		JL LOOP1
		CMP CX,8
		JNZ NOTLET ;redundant(bonus)
		PUSH DI
		MOV DI,SI
		MOV ADR,DI
		POP DI
		MOV DX,[SI]
		MOV [SI],DI
		MOV [DI],DX
		MOV ADR,SI
		DEC CX
		INC BX
		JMP LOOP2
	
	NOTLET:
		PUSH DI
		MOV DI,ADR
		MOV [DI],SI
		POP DI
		MOV DX,[SI]
		MOV [SI],DI
		MOV [DL],DX
		MOV ADR,SI
		DEC CX
		INC BX
		JMP LOOP2
		
	DONE2:
		JMP LOOP1
		
	MOV AH,9
	LEA DX,[DI+2]
	INT 21H
	MOV SI,[DI]
	MOV DI,SI
	MOV DX,OFFSET NEWLINE
	MOV AH,9 ;MOVE CURSOR TO NEXT LINE
	INT 21H
	CMP BYTE PTR DI,0
	JNZ DONE2	
	
	;AGAIN:
	;	PRINT [DI+2];USED MACRO HERE
	;	PRINT NEWLINE;USED MACRO
    
    
	;	MOV SI,[DI]
	;	CMP SI,0
	;	JZ DONE
	;	MOV DI,SI
	;	JMP AGAIN
  
	DONE:
	RET
MAIN ENDP
CODE_SEG ENDS              
END MAIN