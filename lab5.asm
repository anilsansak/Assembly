INCLUDE NUTS.DAT
INCLUDE DOS.MAC                                               
STACK_SEG SEGMENT STACK USE16
 DB 100 DUP(?)
STACK_SEG ENDS     

DATA_SEG SEGMENT 'DATA' USE16
NUTS
ADR DW 80,?,81 DUP('$')
OUTMSG DB 0DH,0AH,'   BUBBLE SORTED LIST   $' 
OUTMSG2 DB 0DH,0AH,'   ORIGINAL LIST   $' 
NEWLINE DB 0DH,0AH,'$'
DATA_SEG ENDS 
CODE_SEG SEGMENT PARA 'CODE' PUBLIC USE16
ASSUME CS:CODE_SEG, DS:DATA_SEG, SS:STACK_SEG
MAIN PROC FAR
INITIATE;USED MACRO HERE 
  MOV DI,LIST_ORG
 PRINT OUTMSG2
 PRINT NEWLINE
 AGAIN:
 PRINT [DI+2] 
 PRINT NEWLINE
   MOV SI,[DI]
   CMP SI,0
   JZ DONE
   MOV DI,SI
   JMP AGAIN
   DONE:
 PRINT NEWLINE

 PRINT OUTMSG
 PRINT NEWLINE
 MOV DI,LIST_ORG
 MOV BX,1  
LOOP1:
 CMP BX,0H
 JZ EXIT
 XOR BX,BX
 MOV CX,8
 MOV DI,LIST_ORG  
LOOP2:  
  CMP CX,1
  JE DONE2
  MOV SI,[DI]
  MOV AL,[DI+2]
  MOV AH,[SI+2] 
  CMP AH,AL
  JL CHANGE  
  
  NOCHANGE:
  LEA DX,[DI]
  MOV ADR,DX
  MOV DI,SI
  DEC CX  
  JMP LOOP2
  
  CHANGE: 
  CMP AH,41H
  JL  LOOP1
  CMP CX,8
  JNZ NOTLET
  PUSH DI
  MOV DI,SI
  MOV ADR,DI
  POP DI
  
  PUSH DI
  LEA DI,LIST_ORG
  MOV [DI],SI
  POP DI
  
  MOV DX,[SI]
  MOV [SI],DI
  MOV [DI],DX
  MOV ADR,SI
  DEC CX
  INC BX 
  JMP LOOP2 
  NOTLET:
  PUSH DI
  MOV DI,ADR
  MOV [DI],SI
  POP DI
  MOV DX,[SI]
  MOV [SI],DI
  MOV [DI],DX
  MOV ADR,SI 
  DEC CX
  INC BX
  JMP LOOP2 
  
  DONE2:
  
  JMP LOOP1
  EXIT:

  MOV DI,LIST_ORG
  AGAIN2:
  PRINT [DI+2]
  PRINT NEWLINE 
   MOV SI,[DI]
   CMP SI,0
   JZ RETT
   MOV DI,SI
   JMP AGAIN2
  RETT:     
   RET
MAIN ENDP
CODE_SEG ENDS              
END MAIN